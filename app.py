# app.py
# --------------------
# –ï–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤

import os
import re
import secrets
import smtplib
import oracledb
from email.message import EmailMessage
from datetime import datetime, timedelta, timezone
from flask import Flask, request, redirect, url_for, flash, render_template_string, session
from werkzeug.security import generate_password_hash, check_password_hash
from dotenv import load_dotenv


# ---------- —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è timezones ----------
def as_aware_utc(dt: datetime) -> datetime:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É—Ç—å timezone-aware datetime –≤ UTC."""
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)
def is_admin():
    return session.get("user_role") == "ADMIN"

def admin_required():
    if not is_admin():
        flash("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
        return redirect(url_for("login"))
    return None
# –≥—Ä—É–∑–∏–º .env –∏–∑ –ø–∞–ø–∫–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è Windows)
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), ".env"))

DEV_SHOW_CODE = False  # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–¥ –≤–æ flash –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# ----------- Oracle config -----------
ORA_HOST = os.getenv("ORA_HOST", "oracle")  # –¥–ª—è Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
ORA_PORT = int(os.getenv("ORA_PORT", "1521"))
ORA_SERVICE = os.getenv("ORA_SERVICE", "FREEPDB1")
ORA_USER = os.getenv("ORA_USER", "SYSTEM")
ORA_PASSWORD = os.getenv("ORA_PASSWORD", "AnosVoldigod0")
DSN = f"{ORA_HOST}:{ORA_PORT}/{ORA_SERVICE}"

app = Flask(__name__)
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "dev-change-me")

CODE_TTL_MIN = 5
MAX_ATTEMPTS = 5

# ---------------- –®–∞–±–ª–æ–Ω—ã (inline) ----------------
BASE = """
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>{{ title or "–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤" }}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body{
      min-height:100vh;
      background:linear-gradient(135deg,#f0f4ff,#e8fbff);
      font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Helvetica Neue,Arial;
      padding:20px;
    }
    .glass{
      background:rgba(255,255,255,.75);backdrop-filter:blur(12px);
      border:1px solid rgba(255,255,255,.45);border-radius:18px;
      box-shadow:0 10px 30px rgba(0,0,0,.08);padding:28px;margin-bottom:20px;
    }
    .brand{font-weight:800;letter-spacing:.3px;color:#1b3a57;}
    .btn-primary{background:#2563eb;border-color:#2563eb;}
    .btn-primary:hover{background:#1e40af;border-color:#1e40af;}
    .form-control:focus,.form-select:focus{box-shadow:0 0 0 .2rem rgba(37,99,235,.15);border-color:#2563eb;}
    .search-form{max-width:800px;margin:0 auto;}
    .route-card{border-left:4px solid #2563eb;}
    .navbar-brand { font-weight: 800; letter-spacing: .3px; color: #1b3a57; }
  </style>
</head>
<body>

  <!-- NAVBAR: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º; —Å–ø—Ä–∞–≤–∞ –ª–∏–±–æ dropdown –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –∫–Ω–æ–ø–∫–∞ –í–æ–π—Ç–∏ -->
  <nav class="navbar navbar-light bg-light rounded mb-4">
    <div class="container d-flex justify-content-between align-items-center">
      <a class="navbar-brand fw-bold" href="{{ url_for('search_routes') }}">üöå –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤</a>

      {% if session.get('user_login') %}
      <div class="d-flex align-items-center">
        {% if session.get('user_role') == 'ADMIN' %}
          <a class="btn btn-sm btn-outline-primary me-2" href="{{ url_for('admin_dashboard') }}">–ê–¥–º–∏–Ω–∫–∞</a>
        {% endif %}

        <div class="dropdown">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button"
                  id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">
            {{ session['user_login'] }}
            {% if session.get('user_role')=='ADMIN' %}
              <span class="badge text-bg-warning ms-1">admin</span>
            {% endif %}
          </button>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
            <li><h6 class="dropdown-header">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h6></li>
            <li><a class="dropdown-item" href="#">üßæ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</a></li>
            <li><a class="dropdown-item" href="#">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</a></li>
            <li><a class="dropdown-item" href="#">üéü –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∏–¥–∫—É</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="{{ url_for('logout') }}">üö™ –í—ã—Ö–æ–¥</a></li>
          </ul>
        </div>
      </div>
      {% else %}
        <a class="btn btn-outline-primary" href="{{ url_for('login') }}">–í–æ–π—Ç–∏</a>
      {% endif %}
    </div>
  </nav>

  <main class="container">
    {% with msgs = get_flashed_messages(with_categories=true) %}
      {% if msgs %}
        <div class="mb-3">
          {% for cat, m in msgs %}
            <div class="alert alert-{{cat}} shadow-sm">{{ m }}</div>
          {% endfor %}
        </div>
      {% endif %}
    {% endwith %}
    {{ body|safe }}
  </main>

  <!-- –ù—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã dropdown -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""
ADMIN_TMPL = """
<div class="glass">
  <h2 class="h5 mb-3">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>

  <ul class="nav nav-tabs mb-3" role="tablist">
    <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#orders">–û–ø–ª–∞—Ç—ã –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ</a></li>
    <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#discounts">–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–∫–∏–¥–∫—É</a></li>
  </ul>

  <div class="tab-content">
    <div class="tab-pane fade show active" id="orders">
      {% if orders %}
      <div class="list-group">
        {% for o in orders %}
          <div class="list-group-item d-flex justify-content-between align-items-center">
            <div>
              <div class="fw-bold">–ó–∞–∫–∞–∑ #{{ o.ID }} ‚Äî {{ o.USER_LOGIN }}</div>
              <div class="text-muted small">–°—É–º–º–∞: {{ o.TOTAL_PRICE }} ‚ÇΩ ¬∑ –†–µ–π—Å: {{ o.SCHEDULE_ID }} ¬∑ {{ o.CREATED_AT }}</div>
            </div>
            <div class="d-flex gap-2">
              <form method="post" action="{{ url_for('admin_mark_paid', order_id=o.ID) }}">
                <button class="btn btn-success btn-sm">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É</button>
              </form>
              <form method="post" action="{{ url_for('admin_cancel_order', order_id=o.ID) }}">
                <button class="btn btn-outline-danger btn-sm">–û—Ç–º–µ–Ω–∏—Ç—å</button>
              </form>
            </div>
          </div>
        {% endfor %}
      </div>
      {% else %}
        <div class="text-muted">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW.</div>
      {% endif %}
    </div>

    <div class="tab-pane fade" id="discounts">
      {% if requests %}
      <div class="list-group">
        {% for r in requests %}
          <div class="list-group-item">
            <div class="d-flex justify-content-between">
              <div>
                <div class="fw-bold">–ó–∞—è–≤–∫–∞ #{{ r.ID }} ‚Äî {{ r.USER_LOGIN }}</div>
                <div class="small text-muted">{{ r.CREATED_AT }}</div>
                <div class="mt-1">{{ r.MESSAGE or "‚Äî" }}</div>
              </div>
              <div class="d-flex align-items-center gap-2">
                <form method="post" action="{{ url_for('admin_discount_decide', req_id=r.ID) }}">
                  <input type="hidden" name="action" value="approve">
                  <input type="number" name="percent" class="form-control form-control-sm" placeholder="%" min="1" max="90" style="width:80px">
                  <button class="btn btn-success btn-sm">–û–¥–æ–±—Ä–∏—Ç—å</button>
                </form>
                <form method="post" action="{{ url_for('admin_discount_decide', req_id=r.ID) }}">
                  <input type="hidden" name="action" value="reject">
                  <button class="btn btn-outline-danger btn-sm">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                </form>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
      {% else %}
        <div class="text-muted">–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING.</div>
      {% endif %}
    </div>
  </div>
</div>
"""

INDEX = """
<div class="glass" style="max-width: 520px; margin: 0 auto;">
  <h1 class="brand h4 mb-3">–°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤</h1>
  {% if session.get('user_login') %}
    <p class="mb-3">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>{{ session['user_login'] }}</b>.</p>
    <div class="d-grid gap-2">
      <a class="btn btn-primary" href="{{ url_for('search_routes') }}">–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤</a>
      <a class="btn btn-outline-secondary" href="{{ url_for('logout') }}">–í—ã–π—Ç–∏</a>
    </div>
  {% else %}
    <p class="text-muted">–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ e-mail, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Oracle).</p>
    <div class="d-grid gap-2">
      <a class="btn btn-primary" href="{{ url_for('register') }}">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
      <a class="btn btn-outline-secondary" href="{{ url_for('login') }}">–í–æ–π—Ç–∏</a>
    </div>
  {% endif %}
</div>
"""

REGISTER = """
<div class="glass" style="max-width: 520px; margin: 0 auto;">
  <h2 class="h4 mb-3">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
  <form method="post" action="{{ url_for('register') }}" novalidate>
    <div class="mb-3">
      <label class="form-label">–õ–æ–≥–∏–Ω *</label>
      <input type="text" class="form-control" name="login" required value="{{ f.get('login','') }}"
             placeholder="–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ">
    </div>
    <div class="mb-3">
      <label class="form-label">E-mail *</label>
      <input type="email" class="form-control" name="email" required value="{{ f.get('email','') }}"
             placeholder="name@example.com">
    </div>
    <div class="mb-3">
      <label class="form-label">–ü–∞—Ä–æ–ª—å *</label>
      <input type="password" class="form-control" name="password" required minlength="8" placeholder="–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤">
    </div>
    <div class="mb-4">
      <label class="form-label">–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è *</label>
      <input type="password" class="form-control" name="password2" required minlength="8">
    </div>
    <button type="submit" class="btn btn-primary w-100">–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å e-mail</button>
  </form>
  <div class="mt-3 text-center">
    <a href="{{ url_for('login') }}" class="link-secondary">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏</a>
  </div>
</div>
"""

VERIFY = """
<div class="glass" style="max-width: 520px; margin: 0 auto;">
  <h2 class="h4 mb-3">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ e-mail</h2>
  <p class="text-muted mb-3">–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å <b>{{ email }}</b>. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.</p>
  <form method="post" action="{{ url_for('verify_code') }}" novalidate>
    <input type="hidden" name="login" value="{{ login }}">
    <div class="mb-3">
      <label class="form-label">–ö–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ *</label>
      <input type="text" class="form-control" name="code" required maxlength="6" minlength="4" placeholder="6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥">
    </div>
    <button type="submit" class="btn btn-primary w-100">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
  </form>
  <form class="mt-3" method="post" action="{{ url_for('resend_code') }}">
    <input type="hidden" name="login" value="{{ login }}">
    <button type="submit" class="btn btn-link w-100">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑</button>
  </form>
  <div class="mt-2">
    <a href="{{ url_for('register') }}" class="link-secondary">–ò–∑–º–µ–Ω–∏—Ç—å e-mail/–ª–æ–≥–∏–Ω</a>
  </div>
</div>
"""

SUCCESS = """
<div class="glass" style="max-width: 520px; margin: 0 auto;">
  <h2 class="h4 mb-2">–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω ‚úÖ</h2>
  <p class="text-muted">–õ–æ–≥–∏–Ω: <b>{{ login }}</b></p>
  <div class="d-grid gap-2">
    <a class="btn btn-primary" href="{{ url_for('login') }}">–í–æ–π—Ç–∏</a>
    <a class="btn btn-outline-secondary" href="{{ url_for('index') }}">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
  </div>
</div>
"""

LOGIN_FORM = """
<div class="glass" style="max-width: 520px; margin: 0 auto;">
  <h2 class="h4 mb-3">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
  <form method="post" action="{{ url_for('login') }}" novalidate>
    <div class="mb-3">
      <label class="form-label">–õ–æ–≥–∏–Ω</label>
      <input type="text" class="form-control" name="login" required value="{{ f.get('login','') }}">
    </div>
    <div class="mb-4">
      <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
      <input type="password" class="form-control" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary w-100">–í–æ–π—Ç–∏</button>
  </form>
  <div class="mt-3 text-center">
    <a href="{{ url_for('register') }}" class="link-secondary">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a>
  </div>
</div>
"""

SEARCH_FORM = """
<div class="glass search-form">
  <h2 class="h4 mb-4">üîç –ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤</h2>
  <form method="post" action="{{ url_for('search_routes') }}" novalidate>
    <div class="row g-3">
      <div class="col-md-5">
        <label class="form-label">–û—Ç–∫—É–¥–∞</label>
        <select class="form-select" name="from_city" required>
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ --</option>
          {% for city in cities %}
            <option value="{{ city.ID }}" {% if request.form.get('from_city') == city.ID|string %}selected{% endif %}>
              {{ city.NAME }}
            </option>
          {% endfor %}
        </select>
      </div>
      <div class="col-md-5">
        <label class="form-label">–ö—É–¥–∞</label>
        <select class="form-select" name="to_city" required>
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ --</option>
          {% for city in cities %}
            <option value="{{ city.ID }}" {% if request.form.get('to_city') == city.ID|string %}selected{% endif %}>
              {{ city.NAME }}
            </option>
          {% endfor %}
        </select>
      </div>
      <div class="col-md-6">
        <label class="form-label">–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</label>
        <input type="date" class="form-control" name="travel_date" required 
               value="{{ request.form.get('travel_date', '') }}"
               min="{{ today }}">
      </div>
      <div class="col-md-6">
        <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
        <select class="form-select" name="category" required>
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é --</option>
          <option value="FAST" {% if request.form.get('category') == 'FAST' %}selected{% endif %}>üöÄ –ë—ã—Å—Ç—Ä–∞—è</option>
          <option value="PREMIUM" {% if request.form.get('category') == 'PREMIUM' %}selected{% endif %}>‚≠ê –ü—Ä–µ–º–∏—É–º</option>
          <option value="BUDGET" {% if request.form.get('category') == 'BUDGET' %}selected{% endif %}>üí∞ –ë—é–¥–∂–µ—Ç–Ω–∞—è</option>
          <option value="INTERESTING" {% if request.form.get('category') == 'INTERESTING' %}selected{% endif %}>üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è</option>
        </select>
      </div>
    </div>
    <div class="mt-4">
      <button type="submit" class="btn btn-primary btn-lg w-100">
        üîç –ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã
      </button>
    </div>
  </form>
</div>
"""

RESULTS = """
{% if routes %}
<div class="glass">
  <h3 class="h5 mb-3">üéâ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {{ routes|length }}</h3>
  <div class="row g-3">
    {% for route in routes %}
    <div class="col-12">
      <div class="card route-card">
        <div class="card-body">
          <div class="row">
            <div class="col-md-8">
              <h5 class="card-title">{{ route.CITIES_SEQUENCE }}</h5>
              <div class="row text-muted small">
                <div class="col-6">
                  <strong>üöó –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> {{ route.TOTAL_DISTANCE_KM }} –∫–º
                </div>
                <div class="col-6">
                  <strong>‚è±Ô∏è –í—Ä–µ–º—è:</strong> {{ (route.TOTAL_TIME_MINUTES // 60) }}—á {{ (route.TOTAL_TIME_MINUTES % 60) }}–º
                </div>
                <div class="col-6">
                  <strong>üí∞ –¶–µ–Ω–∞:</strong> {{ route.TOTAL_PRICE }} —Ä—É–±.
                </div>
                <div class="col-6">
                  <strong>üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> 
                  {% if route.CATEGORY == 'FAST' %}üöÄ –ë—ã—Å—Ç—Ä–∞—è
                  {% elif route.CATEGORY == 'PREMIUM' %}‚≠ê –ü—Ä–µ–º–∏—É–º
                  {% elif route.CATEGORY == 'BUDGET' %}üí∞ –ë—é–¥–∂–µ—Ç–Ω–∞—è
                  {% else %}üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è{% endif %}
                </div>
              </div>
            </div>
            <div class="col-md-4 text-end">
              <div class="mb-2">
                <strong>üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong><br>
                {{ route.START_DATETIME.strftime('%d.%m.%Y %H:%M') }}
              </div>
              <div class="mb-3">
                <strong>üïí –ü—Ä–∏–±—ã—Ç–∏–µ:</strong><br>
                {{ route.END_DATETIME.strftime('%d.%m.%Y %H:%M') }}
              </div>
              <form method="get" action="{{ url_for('seats') }}">
              <input type="hidden" name="schedule_id" value="{{ route.SCHEDULE_ID }}">
              <button class="btn btn-primary">–í—ã–±—Ä–∞—Ç—å</button>
            </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    {% endfor %}
  </div>
</div>
{% elif request.method == 'POST' %}
<div class="glass">
  <div class="alert alert-warning text-center">
    <h4>üòî –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
    <p class="mb-0">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
  </div>
</div>
{% endif %}
"""
SEATS_TEMPLATE = """
<div class="glass">
  <h2 class="h5 mb-3 text-center">–í—ã–±–æ—Ä –º–µ—Å—Ç ‚Äî —Ä–µ–π—Å #{{ schedule_id }}</h2>

  <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∞–≥–æ–Ω–æ–≤ -->
  <div class="d-flex align-items-center justify-content-between mb-3">
    <a class="btn btn-outline-secondary {% if coach<=1 %}disabled{% endif %}"
       href="{{ url_for('seats') }}?schedule_id={{ schedule_id }}&coach={{ coach-1 }}">‚óÄ –í–∞–≥–æ–Ω {{ coach-1 }}</a>

    <div class="d-flex justify-content-center flex-wrap" style="gap:6px">
      {% for c in range(1, 11) %}
        <a class="btn btn-sm {% if c==coach %}btn-primary{% else %}btn-outline-primary{% endif %}"
           href="{{ url_for('seats') }}?schedule_id={{ schedule_id }}&coach={{ c }}">{{ c }}</a>
      {% endfor %}
    </div>

    <a class="btn btn-outline-secondary {% if coach>=10 %}disabled{% endif %}"
       href="{{ url_for('seats') }}?schedule_id={{ schedule_id }}&coach={{ coach+1 }}">–í–∞–≥–æ–Ω {{ coach+1 }} ‚ñ∂</a>
  </div>

  <form method="post" action="{{ url_for('seats_post', schedule_id=schedule_id) }}">
    <!-- –ª–µ–≥–µ–Ω–¥–∞ -->
    <div class="text-muted small mb-2 text-center">–°—Ö–µ–º–∞ (–≤–∏–¥ —Å–≤–µ—Ä—Ö—É): 2 –º–µ—Å—Ç–∞ ‚Äî –∫–æ—Ä–∏–¥–æ—Ä ‚Äî 2 –º–µ—Å—Ç–∞</div>

    <!-- —Å–µ—Ç–∫–∞ –≤–∞–≥–æ–Ω–∞ (–ø–æ —Ü–µ–Ω—Ç—Ä—É): 5 –∫–æ–ª–æ–Ω–æ–∫ (2 –º–µ—Å—Ç–∞ + –∫–æ—Ä–∏–¥–æ—Ä + 2 –º–µ—Å—Ç–∞), 5 —Ä—è–¥–æ–≤ (–∏—Ç–æ–≥–æ 20 –º–µ—Å—Ç) -->
    <div class="d-flex justify-content-center">
      <div class="border rounded p-3"
           style="display:grid;grid-template-columns:repeat(5, 68px);gap:10px;align-items:center;width:max-content;margin:0 auto">

        <!-- –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ -->
        <div class="text-muted small text-center">–õ</div>
        <div class="text-muted small text-center">–õ</div>
        <div class="text-muted small text-center">–∫–æ—Ä</div>
        <div class="text-muted small text-center">–ü</div>
        <div class="text-muted small text-center">–ü</div>

        {% for sn in range(1,21) %}
          {% set row = ((sn-1)//4)+1 %}
          {% set pos = ((sn-1)%4)+1 %}
          {% set gridcol = 1 if pos==1 else (2 if pos==2 else (4 if pos==3 else 5)) %}
          {% set seat = (coach_seats|selectattr('SEAT_NO','equalto', sn)|list)|first %}
          <label class="border rounded px-2 py-2 {% if seat.STATUS!='FREE' %}bg-light text-muted{% endif %}"
                 style="grid-column: {{gridcol}}; text-align:center">
            <input type="checkbox" name="seat_ids" value="{{ seat.ID }}" {% if seat.STATUS!='FREE' %}disabled{% endif %}>
            <div class="small">–†—è–¥ {{ row }}</div>
            <div class="fw-bold">{{ sn }}</div>
            <div class="small">
              {% if seat.STATUS=='FREE' %}—Å–≤–æ–±–æ–¥–Ω–æ{% elif seat.STATUS=='HELD' %}–±—Ä–æ–Ω—å{% else %}–∫—É–ø–ª–µ–Ω–æ{% endif %}
            </div>
          </label>
          {% if pos==2 %}
            <div></div> <!-- –∫–æ—Ä–∏–¥–æ—Ä: –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ 3 -->
          {% endif %}
        {% endfor %}
      </div>
    </div>

    <div class="mt-3 d-flex gap-2 justify-content-center">
      <button class="btn btn-primary">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</button>
      <a class="btn btn-outline-secondary" href="{{ url_for('search_routes') }}">–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É</a>
    </div>
  </form>
</div>
"""



# ---------------- –í–∞–ª–∏–¥–∞—Ü–∏—è ----------------
LOGIN_RE = re.compile(r"^[A-Za-z0-9_]{3,32}$")
EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
CODE_RE = re.compile(r"^\d{4,8}$")


def valid_login(s: str) -> bool: return bool(LOGIN_RE.match(s or ""))


def valid_email(s: str) -> bool: return bool(EMAIL_RE.match(s or ""))


def valid_code(s: str) -> bool: return bool(CODE_RE.match(s or ""))


# ---------------- Email ----------------
def send_email(to_email: str, subject: str, text: str) -> None:
    g_from = (os.getenv("FROM_GMAIL") or "").strip()
    g_app = (os.getenv("GMAIL_APP_PW") or "").strip()
    msg = EmailMessage()
    msg["From"] = g_from if g_from else (os.getenv("SMTP_FROM") or "")
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.set_content(text)

    try:
        if g_from and g_app:
            with smtplib.SMTP("smtp.gmail.com", 587) as smtp:
                smtp.ehlo();
                smtp.starttls();
                smtp.ehlo()
                smtp.login(g_from, g_app)
                smtp.send_message(msg)
            print(f"[EMAIL][gmail] to={to_email}: OK")
            return
        host = (os.getenv("SMTP_HOST") or "").strip()
        if not host:
            raise RuntimeError("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP/Gmail")
        port = int(os.getenv("SMTP_PORT") or "587")
        user = (os.getenv("SMTP_USER") or "").strip()
        pwd = (os.getenv("SMTP_PASSWORD") or "").strip()
        use_tls = (os.getenv("SMTP_TLS") or "1").strip() in ("1", "true", "True")
        with (smtplib.SMTP(host, port, timeout=15) if use_tls else smtplib.SMTP_SSL(host, port, timeout=15)) as s:
            if use_tls:
                s.ehlo();
                s.starttls()
            s.login(user, pwd)
            s.send_message(msg)
        print(f"[EMAIL][smtp] to={to_email}: OK")
    except Exception as e:
        print(f"[EMAIL][ERROR] to={to_email}: {e}")
        print(f"[EMAIL][fallback] -> {to_email}: {text}")


# ---------------- Oracle helpers ----------------
def get_conn():
    try:
        return oracledb.connect(user=ORA_USER, password=ORA_PASSWORD, dsn=DSN)
    except Exception as e:
        print(f"[DB][CONNECTION ERROR] {e}")
        raise
def db_get_seats(schedule_id: int):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
          SELECT ID, SCHEDULE_ID, TRANSPORT_TYPE_ID, COACH_NO, SEAT_NO, STATUS
          FROM SCHEDULE_SEATS
          WHERE SCHEDULE_ID = :sid
          ORDER BY COACH_NO, SEAT_NO
        """, {"sid": schedule_id})
        rows = cur.fetchall()
        return [dict(zip([c[0] for c in cur.description], r)) for r in rows]

def db_hold_seats(seat_ids: list[int]) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç FREE -> HELD –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
    if not seat_ids:
        return 0
    with get_conn() as conn:
        cur = conn.cursor()
        cur.executemany("""
          UPDATE SCHEDULE_SEATS
          SET STATUS='HELD'
          WHERE ID=:1 AND STATUS='FREE'
        """, [(sid,) for sid in seat_ids])
        updated = cur.rowcount
        conn.commit()
        return int(updated or 0)

def db_create_order(user_login: str, schedule_id: int, seat_ids: list[int], per_seat_price: float) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ + –ø–æ–∑–∏—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç order_id."""
    total = per_seat_price * len(seat_ids)
    with get_conn() as conn:
        cur = conn.cursor()
        # –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º ID
        oid = cur.var(oracledb.NUMBER)
        cur.execute("""
          INSERT INTO ORDERS(USER_LOGIN, SCHEDULE_ID, TOTAL_PRICE, STATUS)
          VALUES (:u, :sid, :tot, 'NEW')
          RETURNING ID INTO :oid
        """, dict(u=user_login, sid=schedule_id, tot=total, oid=oid))
        order_id = int(oid.getvalue())
        # –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        cur.executemany("""
          INSERT INTO ORDER_ITEMS(ORDER_ID, SEAT_ID, PRICE)
          VALUES (:1, :2, :3)
        """, [(order_id, sid, per_seat_price) for sid in seat_ids])
        conn.commit()
        return order_id

def db_mark_order_paid(order_id: int) -> None:
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE ORDERS SET STATUS='PAID' WHERE ID=:id", {"id": order_id})
        cur.execute("""
          UPDATE SCHEDULE_SEATS
          SET STATUS='SOLD'
          WHERE ID IN (SELECT SEAT_ID FROM ORDER_ITEMS WHERE ORDER_ID=:id)
        """, {"id": order_id})
        conn.commit()


def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    print("[DB] Initializing database...")
    ddl_users = """
    CREATE TABLE USERS (
  ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  LOGIN         VARCHAR2(64)  NOT NULL,
  EMAIL         VARCHAR2(254) NOT NULL,
  PASSWORD_HASH VARCHAR2(255) NOT NULL,
  ROLE          VARCHAR2(16)  DEFAULT 'CLIENT' NOT NULL,
  VERIFIED_AT   TIMESTAMP WITH TIME ZONE NULL,
  VERIFICATION_CODE   VARCHAR2(8) NULL,
  CODE_EXPIRES_AT     TIMESTAMP WITH TIME ZONE NULL,
  VERIFICATION_ATTEMPTS NUMBER DEFAULT 0 NOT NULL,
  CONSTRAINT PK_USERS PRIMARY KEY (ID),
  CONSTRAINT UQ_USERS_LOGIN UNIQUE (LOGIN),
  CONSTRAINT UQ_USERS_EMAIL UNIQUE (EMAIL),
  CONSTRAINT CK_USERS_ROLE CHECK (ROLE IN ('CLIENT','ADMIN'))
)
    """
    try:
        with get_conn() as conn:
            cur = conn.cursor()
            try:
                cur.execute(ddl_users)
                print("[DB] USERS table created successfully")
            except oracledb.Error as e:
                if "ORA-00955" not in str(e):
                    print(f"[DB] Error creating USERS table: {e}")
                    raise
                else:
                    print("[DB] USERS table already exists")
            conn.commit()
    except Exception as e:
        print(f"[DB][INIT ERROR] {e}")
        raise


def check_db_connection():
    try:
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM DUAL")
        result = cur.fetchone()
        print(f"[DB] Connection test: {result}")
        cur.close()
        conn.close()
        return True
    except Exception as e:
        print(f"[DB][CONNECTION ERROR] {e}")
        return False


def db_get_unverified_user(login):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT LOGIN, EMAIL, PASSWORD_HASH, VERIFICATION_CODE, CODE_EXPIRES_AT, VERIFICATION_ATTEMPTS
            FROM USERS
            WHERE LOGIN = :l AND VERIFIED_AT IS NULL
        """, [login])
        row = cur.fetchone()
        if not row:
            return None
        exp = as_aware_utc(row[4]) if row[4] else None
        return {
            "login": row[0],
            "email": row[1],
            "password_hash": row[2],
            "code": row[3],
            "expires_at": exp,
            "attempts": int(row[5]),
        }


def db_update_verification_code(login, code, expires_at):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            UPDATE USERS
            SET VERIFICATION_CODE = :code, CODE_EXPIRES_AT = :expires_at, VERIFICATION_ATTEMPTS = 0
            WHERE LOGIN = :login AND VERIFIED_AT IS NULL
        """, dict(code=code, expires_at=expires_at, login=login))
        conn.commit()


def db_increment_attempts(login):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute(
            "UPDATE USERS SET VERIFICATION_ATTEMPTS = VERIFICATION_ATTEMPTS + 1 WHERE LOGIN = :l AND VERIFIED_AT IS NULL",
            [login])
        conn.commit()


def db_mark_verified(login):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            UPDATE USERS 
            SET VERIFIED_AT = :verified_at, VERIFICATION_CODE = NULL, CODE_EXPIRES_AT = NULL, VERIFICATION_ATTEMPTS = 0
            WHERE LOGIN = :login
        """, dict(verified_at=datetime.now(timezone.utc), login=login))
        conn.commit()


def db_create_unverified_user(login, email, password_hash, code, expires_at):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO USERS (LOGIN, EMAIL, PASSWORD_HASH, VERIFICATION_CODE, CODE_EXPIRES_AT)
            VALUES (:l, :e, :ph, :code, :exp)
        """, dict(l=login, e=email, ph=password_hash, code=code, exp=expires_at))
        conn.commit()


def db_login_taken(login: str) -> bool:
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM USERS WHERE LOGIN = :l", {"l": login})
        return cur.fetchone() is not None


def db_email_taken(email: str) -> bool:
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM USERS WHERE EMAIL = :e", {"e": email})
        return cur.fetchone() is not None


def db_get_user_by_login(login: str):
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
                    SELECT LOGIN, EMAIL, PASSWORD_HASH, VERIFIED_AT, ROLE
                   FROM USERS
                    WHERE LOGIN = :l AND VERIFIED_AT IS NOT NULL
                """, {"l": login})
        row = cur.fetchone()
        if not row:
            return None
        return {
            "login": row[0],
            "email": row[1],
            "password_hash": row[2],
            "verified_at": row[3],
            "role": row[4],
        }


# ---------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ----------------
def get_cities():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        with get_conn() as conn:
            cur = conn.cursor()
            cur.execute("SELECT ID, NAME FROM CITY ORDER BY NAME")
            cities = cur.fetchall()
            return [dict(zip([col[0] for col in cur.description], city)) for city in cities]
    except Exception as e:
        print(f"[DB][ERROR getting cities] {e}")
        return []


def search_routes_db(from_city_id, to_city_id, travel_date, category):
    """–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    try:
        with get_conn() as conn:
            cur = conn.cursor()

            travel_date = datetime.strptime(travel_date, '%Y-%m-%d')

            query = """
            SELECT 
                rs.SCHEDULE_ID,
                rs.ROUTE_ID,
                rs.CATEGORY,
                rs.CITIES_SEQUENCE,
                rs.TOTAL_DISTANCE_KM,
                rs.TOTAL_PRICE,
                rs.TOTAL_TIME_MINUTES,
                rs.START_DATETIME,
                rs.END_DATETIME,
                rs.PATH_CITY_IDS
            FROM ROUTE_SCHEDULE rs
            WHERE rs.CATEGORY = :category
                AND TRUNC(rs.START_DATETIME) = :travel_date
                AND INSTR('->' || rs.PATH_CITY_IDS || '->', '->' || :from_city_id || '->') > 0
                AND INSTR('->' || rs.PATH_CITY_IDS || '->', '->' || :to_city_id || '->') > 
                    INSTR('->' || rs.PATH_CITY_IDS || '->', '->' || :from_city_id || '->')
            ORDER BY rs.TOTAL_PRICE ASC
            """

            cur.execute(query, {
                'from_city_id': str(from_city_id),
                'to_city_id': str(to_city_id),
                'travel_date': travel_date,
                'category': category
            })

            routes = cur.fetchall()
            return [dict(zip([col[0] for col in cur.description], route)) for route in routes]

    except Exception as e:
        print(f"[DB][ERROR searching routes] {e}")
        return []


# ---------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------------
def generate_code() -> str:
    return f"{secrets.randbelow(900000) + 100000:06d}"

@app.get("/admin")
def admin_dashboard():
    guard = admin_required()
    if guard: return guard
    with get_conn() as conn:
        cur=conn.cursor()
        cur.execute("""
          SELECT ID, USER_LOGIN, SCHEDULE_ID, TOTAL_PRICE, STATUS, CREATED_AT
          FROM ORDERS
          WHERE STATUS='NEW'
          ORDER BY CREATED_AT DESC
        """)
        orders = [dict(zip([c[0] for c in cur.description], r)) for r in cur.fetchall()]
        cur.execute("""
          SELECT ID, USER_LOGIN, MESSAGE, PERCENT, STATUS, CREATED_AT
          FROM DISCOUNT_REQUESTS
          WHERE STATUS='PENDING'
          ORDER BY CREATED_AT DESC
        """)
        requests = [dict(zip([c[0] for c in cur.description], r)) for r in cur.fetchall()]
    body = render_template_string(ADMIN_TMPL, orders=orders, requests=requests)
    return render_template_string(BASE, title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", body=body)

@app.post("/admin/orders/<int:order_id>/paid")
def admin_mark_paid(order_id:int):
    guard = admin_required()
    if guard: return guard
    db_mark_order_paid(order_id)  # —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    flash(f"–ó–∞–∫–∞–∑ #{order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω. –ú–µ—Å—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.", "success")
    return redirect(url_for("admin_dashboard"))

@app.post("/admin/orders/<int:order_id>/cancel")
def admin_cancel_order(order_id:int):
    guard = admin_required()
    if guard: return guard
    with get_conn() as conn:
        cur=conn.cursor()
        cur.execute("""
          UPDATE SCHEDULE_SEATS SET STATUS='FREE'
          WHERE ID IN (SELECT SEAT_ID FROM ORDER_ITEMS WHERE ORDER_ID=:id)
        """, {"id": order_id})
        cur.execute("UPDATE ORDERS SET STATUS='CANCELED' WHERE ID=:id", {"id": order_id})
        conn.commit()
    flash(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω, –º–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.", "info")
    return redirect(url_for("admin_dashboard"))

@app.post("/admin/discounts/<int:req_id>/decide")
def admin_discount_decide(req_id:int):
    guard = admin_required()
    if guard: return guard
    action  = request.form.get("action")
    percent = request.form.get("percent")
    with get_conn() as conn:
        cur=conn.cursor()
        if action == "approve":
            pct = int(percent or 0)
            cur.execute("""
              UPDATE DISCOUNT_REQUESTS
              SET STATUS='APPROVED', PERCENT=:p, REVIEWED_AT=SYSTIMESTAMP
              WHERE ID=:id
            """, {"p": pct, "id": req_id})
        else:
            cur.execute("""
              UPDATE DISCOUNT_REQUESTS
              SET STATUS='REJECTED', REVIEWED_AT=SYSTIMESTAMP
              WHERE ID=:id
            """, {"id": req_id})
        conn.commit()
    flash("–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", "success")
    return redirect(url_for("admin_dashboard"))
# ---------------- –ú–∞—Ä—à—Ä—É—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞ ----------------
@app.get("/")
def index():
    return render_template_string(BASE, title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
                                  body=render_template_string(INDEX))


@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "GET":
        return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      body=render_template_string(REGISTER, f={}))

    login = (request.form.get("login") or "").strip()
    email = (request.form.get("email") or "").strip()
    p1 = request.form.get("password") or ""
    p2 = request.form.get("password2") or ""

    if not valid_login(login):
        flash("–õ–æ–≥–∏–Ω: 3‚Äì32 —Å–∏–º–≤–æ–ª–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ.", "danger")
        return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      body=render_template_string(REGISTER, f={"login": login, "email": email}))
    if not valid_email(email):
        flash("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.", "danger")
        return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      body=render_template_string(REGISTER, f={"login": login, "email": email}))
    if len(p1) < 8 or p1 != p2:
        flash("–ü–∞—Ä–æ–ª—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å –≤ –æ–±–æ–∏—Ö –ø–æ–ª—è—Ö.", "danger")
        return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      body=render_template_string(REGISTER, f={"login": login, "email": email}))

    if db_login_taken(login):
        unverified = db_get_unverified_user(login)
        if unverified:
            code = generate_code()
            expires_at = datetime.now(timezone.utc) + timedelta(minutes=CODE_TTL_MIN)
            db_update_verification_code(login, code, expires_at)

            send_email(unverified["email"], "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
            if DEV_SHOW_CODE:
                flash(f"(dev) –ö–æ–¥: {code}", "info")

            return render_template_string(
                BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                body=render_template_string(VERIFY, login=login, email=unverified["email"])
            )
        else:
            flash("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.", "warning")
            return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                          body=render_template_string(REGISTER, f={"login": login, "email": email}))

    if db_email_taken(email):
        flash("–≠—Ç–æ—Ç e-mail —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.", "warning")
        return render_template_string(BASE, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      body=render_template_string(REGISTER, f={"login": login, "email": email}))

    code = generate_code()
    expires_at = datetime.now(timezone.utc) + timedelta(minutes=CODE_TTL_MIN)
    db_create_unverified_user(login, email, generate_password_hash(p1), code, expires_at)

    send_email(email, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    if DEV_SHOW_CODE:
        flash(f"(dev) –ö–æ–¥: {code}", "info")

    return render_template_string(
        BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        body=render_template_string(VERIFY, login=login, email=email)
    )


@app.post("/verify")
def verify_code():
    login = (request.form.get("login") or "").strip()
    code = (request.form.get("code") or "").strip()

    unverified = db_get_unverified_user(login)
    if not unverified:
        flash("–°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", "danger")
        return redirect(url_for("register"))

    if datetime.now(timezone.utc) > as_aware_utc(unverified["expires_at"]):
        flash("–ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.", "warning")
        return render_template_string(BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                      body=render_template_string(VERIFY, login=login, email=unverified["email"]))

    if not valid_code(code):
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.", "danger")
        return render_template_string(BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                      body=render_template_string(VERIFY, login=login, email=unverified["email"]))

    if unverified["attempts"] >= MAX_ATTEMPTS:
        flash("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", "danger")
        return redirect(url_for("register"))

    if code != unverified["code"]:
        db_increment_attempts(login)
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", "danger")
        return render_template_string(BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                      body=render_template_string(VERIFY, login=login, email=unverified["email"]))

    db_mark_verified(login)
    return render_template_string(BASE, title="–ì–æ—Ç–æ–≤–æ",
                                  body=render_template_string(SUCCESS, login=login))


@app.get("/verify")
def verify_get():
    login = (request.args.get("login") or "").strip()
    unverified = db_get_unverified_user(login)
    if not unverified:
        flash("–°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", "danger")
        return redirect(url_for("register"))
    return render_template_string(
        BASE, title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        body=render_template_string(VERIFY, login=login, email=unverified["email"])
    )


@app.post("/resend")
def resend_code():
    login = (request.form.get("login") or "").strip()
    unverified = db_get_unverified_user(login)
    if not unverified:
        flash("–°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", "danger")
        return redirect(url_for("register"))

    code = generate_code()
    expires_at = datetime.now(timezone.utc) + timedelta(minutes=CODE_TTL_MIN)
    db_update_verification_code(login, code, expires_at)
    send_email(unverified["email"], "–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", f"–í–∞—à –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
    if DEV_SHOW_CODE:
        flash(f"(dev) –ù–æ–≤—ã–π –∫–æ–¥: {code}", "info")

    return redirect(url_for("verify_get", login=login))


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "GET":
        return render_template_string(BASE, title="–í—Ö–æ–¥", body=render_template_string(LOGIN_FORM, f={}))

    login_ = (request.form.get("login") or "").strip()
    password = request.form.get("password") or ""

    if not valid_login(login_):
        flash("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.", "danger")
        return render_template_string(BASE, title="–í—Ö–æ–¥", body=render_template_string(LOGIN_FORM, f={"login": login_}))

    user = db_get_user_by_login(login_)
    if not user:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
        return render_template_string(BASE, title="–í—Ö–æ–¥", body=render_template_string(LOGIN_FORM, f={"login": login_}))

    if not check_password_hash(user["password_hash"], password):
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", "danger")
        return render_template_string(BASE, title="–í—Ö–æ–¥", body=render_template_string(LOGIN_FORM, f={"login": login_}))

    session["user_login"] = user["login"]
    session["user_role"] = user.get("role") or "CLIENT"
    flash("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.", "success")
      # –ï–¥–∏–Ω–∞—è —Ä–∞–∑–≤–∏–ª–∫–∞ –ø–æ —Ä–æ–ª–∏:

    if session["user_role"] == "ADMIN":
        return redirect(url_for("admin_dashboard"))
    else:
        return redirect(url_for("search_routes"))


@app.get("/logout")
def logout():
    session.clear()
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "info")
    return redirect(url_for("index"))


# ---------------- –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–∏—Å–∫–∞ ----------------
@app.route("/search", methods=["GET", "POST"])
def search_routes():
    if not session.get("user_login"):
        flash("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", "warning")
        return redirect(url_for("login"))

    cities = get_cities()
    routes = []

    if request.method == "POST":
        from_city_id = request.form.get("from_city")
        to_city_id = request.form.get("to_city")
        travel_date = request.form.get("travel_date")
        category = request.form.get("category")

        if not all([from_city_id, to_city_id, travel_date, category]):
            flash("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã", "danger")
        elif from_city_id == to_city_id:
            flash("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å", "danger")
        else:
            routes = search_routes_db(from_city_id, to_city_id, travel_date, category)
            if not routes:
                flash("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "info")

    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º routes –≤ —à–∞–±–ª–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
    body_content = render_template_string(
        SEARCH_FORM,
        cities=cities,
        today=datetime.now().strftime('%Y-%m-%d')
    ) + render_template_string(RESULTS, routes=routes)

    return render_template_string(BASE, title="–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤", body=body_content)
@app.get("/seats")
def seats():
    if not session.get("user_login"):
        return redirect(url_for("login"))
    try:
        schedule_id = int(request.args.get("schedule_id") or 0)
    except:
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–π—Å.", "danger")
        return redirect(url_for("search_routes"))

    # –∫–∞–∫–æ–π –≤–∞–≥–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (1..10)
    try:
        coach = int(request.args.get("coach") or 1)
    except:
        coach = 1
    coach = max(1, min(10, coach))

    seats = db_get_seats(schedule_id)
    if not seats:
        flash("–î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Å—Ç (–ø—Ä–æ–≤–µ—Ä—å —Ç—Ä–∏–≥–≥–µ—Ä/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é).", "warning")
        return redirect(url_for("search_routes"))

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∞–≥–æ–Ω–∞
    coach_seats = [s for s in seats if int(s["COACH_NO"]) == coach]

    body = render_template_string(
        SEATS_TEMPLATE,
        seats=seats,            # –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        coach_seats=coach_seats,
        coach=coach,
        schedule_id=schedule_id
    )
    return render_template_string(BASE, title="–í—ã–±–æ—Ä –º–µ—Å—Ç", body=body)


@app.post("/seats/<int:schedule_id>")
def seats_post(schedule_id: int):
    if not session.get("user_login"):
        return redirect(url_for("login"))
    # —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID –º–µ—Å—Ç
    raw_ids = request.form.getlist("seat_ids")
    seat_ids = [int(s) for s in raw_ids if s.isdigit()]
    if not seat_ids:
        flash("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Å—Ç–æ.", "warning")
        return redirect(url_for("seats") + f"?schedule_id={schedule_id}")

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±—Ä–æ–Ω—å
    updated = db_hold_seats(seat_ids)
    if updated < len(seat_ids):
        flash("–ß–∞—Å—Ç—å –º–µ—Å—Ç —É–∂–µ –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞. –û–±–Ω–æ–≤–∏–ª —Å—Ö–µ–º—É ‚Äî –≤—ã–±–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –µ—â—ë —Ä–∞–∑.", "warning")
        return redirect(url_for("seats") + f"?schedule_id={schedule_id}")

    # –ø–æ–ª—É—á–∏–º —Ü–µ–Ω—É –∑–∞ –º–µ—Å—Ç–æ = TOTAL_PRICE –∏–∑ route_schedule (—Ç–≤–æ–π –ø–æ–∏—Å–∫ —É–∂–µ —ç—Ç–∏–º –æ–ø–µ—Ä–∏—Ä—É–µ—Ç)
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT TOTAL_PRICE FROM ROUTE_SCHEDULE WHERE SCHEDULE_ID=:sid", {"sid": schedule_id})
        row = cur.fetchone()
    if not row:
        flash("–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
        return redirect(url_for("search_routes"))

    per_seat_price = float(row[0])  # –ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: —Ü–µ–Ω–∞ –∑–∞ 1 –º–µ—Å—Ç–æ = TOTAL_PRICE
    order_id = db_create_order(session["user_login"], schedule_id, seat_ids, per_seat_price)
    return redirect(url_for("checkout", order_id=order_id))


@app.get("/checkout/<int:order_id>")
def checkout(order_id: int):
    if not session.get("user_login"):
        return redirect(url_for("login"))
    # –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ (—Å—É–º–º–∞/–º–µ—Å—Ç–∞), –Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏—Ç—å"
    body = f"""
    <div class="glass">
      <h2 class="h5 mb-3">–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</h2>
      <p>–î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç—ã –Ω–µ—Ç. –ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∏ –º–µ—Å—Ç–∞ —Å—Ç–∞–Ω—É—Ç SOLD.</p>
      <form method="post" action="{{{{ url_for('pay_order', order_id={order_id}) }}}}">
        <button class="btn btn-primary">–û–ø–ª–∞—Ç–∏—Ç—å</button>
        <a class="btn btn-outline-secondary" href="{{{{ url_for('search_routes') }}}}">–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É</a>
      </form>
    </div>
    """
    return render_template_string(BASE, title="–û–ø–ª–∞—Ç–∞", body=body)


@app.post("/checkout/<int:order_id>/pay")
def pay_order(order_id: int):
    if not session.get("user_login"):
        return redirect(url_for("login"))
    db_mark_order_paid(order_id)
    flash(f"–ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!", "success")
    return redirect(url_for("search_routes"))


# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ----------------
def initialize_app():
    max_retries = 5
    retry_delay = 5

    for attempt in range(max_retries):
        try:
            print(f"[APP] Initialization attempt {attempt + 1}/{max_retries}")
            init_db()
            if check_db_connection():
                print("[APP] Database initialized successfully")
                return True
            else:
                print(f"[APP] Database connection failed, retrying in {retry_delay} seconds...")
        except Exception as e:
            print(f"[APP] Initialization failed (attempt {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                print(f"[APP] Retrying in {retry_delay} seconds...")
                import time
                time.sleep(retry_delay)
            else:
                print("[APP] Max retries reached, giving up")
                raise
    return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    initialize_app()
except Exception as e:
    print(f"[APP][CRITICAL] Failed to initialize: {e}")
    raise

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)