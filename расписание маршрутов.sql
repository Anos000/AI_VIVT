CREATE TABLE route_schedule (
    schedule_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    route_id INT NOT NULL REFERENCES route(id),
    category VARCHAR(20) NOT NULL CHECK (category IN ('FAST', 'PREMIUM', 'BUDGET', 'INTERESTING')),
    transport_type_id INT NOT NULL REFERENCES transport_type(id),
    speed_kmph NUMBER(5,1) NOT NULL,
    price_per_km NUMBER(8,2) NOT NULL,
    path_city_ids VARCHAR(1000) NOT NULL,
    cities_sequence VARCHAR(2000) NOT NULL,
    total_popularity INT NOT NULL,
    total_distance_km NUMBER(8,1) NOT NULL,
    total_price NUMBER(10,2) NOT NULL,
    total_time_minutes NUMBER(8) NOT NULL,  -- Изменили на минуты
    start_datetime TIMESTAMP NOT NULL,
    end_datetime TIMESTAMP NOT NULL
)

CREATE OR REPLACE VIEW route_popularity AS
WITH route_paths (route_id, current_city_id, path, distance, depth, visited, city_names, city_ids, end_city_id) AS (
  SELECT 
    r.id,
    r.start_city_id, 
    CAST(r.start_city_id AS VARCHAR2(1000)), 
    0, 
    0,
    CAST(r.start_city_id AS VARCHAR2(1000)),
    (SELECT name FROM city WHERE id = r.start_city_id),
    CAST(r.start_city_id AS VARCHAR2(1000)),
    r.end_city_id
  FROM route r
  UNION ALL
  SELECT 
    p.route_id,
    cp.to_city_id,
    p.path || '->' || cp.to_city_id,
    p.distance + cp.dist_km,
    p.depth + 1,
    p.visited || ',' || cp.to_city_id,
    p.city_names || ' → ' || (SELECT name FROM city WHERE id = cp.to_city_id),
    p.city_ids || ',' || cp.to_city_id,
    p.end_city_id
  FROM route_paths p
  JOIN v_city_path_dir cp ON p.current_city_id = cp.from_city_id
  WHERE p.depth < 8
    AND INSTR(',' || p.visited || ',', ',' || cp.to_city_id || ',') = 0
    AND p.current_city_id != p.end_city_id
),
completed_paths AS (
  SELECT 
    rp.route_id,
    rp.path,
    rp.city_names,
    rp.distance,
    rp.depth,
    rp.city_ids
  FROM route_paths rp
  WHERE rp.current_city_id = rp.end_city_id
    AND rp.depth > 0  -- Исключаем прямые маршруты без промежуточных городов
),
path_cities AS (
  SELECT 
    cp.route_id,
    cp.path as path_city_ids,
    cp.city_names as cities_sequence,
    cp.distance as total_distance,
    cp.depth,
    REGEXP_SUBSTR(cp.city_ids, '[^,]+', 1, LEVEL) as city_id
  FROM completed_paths cp
  CONNECT BY LEVEL <= REGEXP_COUNT(cp.city_ids, ',') + 1
    AND PRIOR cp.path = cp.path
    AND PRIOR SYS_GUID() IS NOT NULL
)
SELECT 
  pc.route_id,
  pc.path_city_ids,
  pc.cities_sequence,
  pc.total_distance,
  pc.depth,
  SUM(c.popularity) as total_popularity,
  COUNT(DISTINCT pc.city_id) as cities_count
FROM path_cities pc
JOIN city c ON pc.city_id = c.id
GROUP BY pc.route_id, pc.path_city_ids, pc.cities_sequence, pc.total_distance, pc.DEPTH




-- 1. БЫСТРЫЕ маршруты (FAST) - все 12 маршрутов по 15 путей
INSERT INTO route_schedule (
  route_id, category, transport_type_id, speed_kmph, price_per_km, 
  path_city_ids, cities_sequence, total_popularity, total_distance_km, 
  total_price, total_time_minutes, start_datetime, end_datetime
)
SELECT 
  rp.route_id,
  'FAST' as category,
  2 as transport_type_id,
  tt.speed_kmph,
  tt.price_per_km,
  rp.path_city_ids,
  rp.cities_sequence,
  rp.total_popularity,
  rp.total_distance as total_distance_km,
  ROUND(rp.total_distance * tt.price_per_km, 2) as total_price,
  ROUND((rp.total_distance / tt.speed_kmph) * 60) as total_time_minutes, -- Переводим в минуты
  -- Расписание на 3 месяца (90 дней) с разным временем в течение дня
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 17 + days.day_offset * 23), 16))/24 as start_datetime, -- 6:00-22:00
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 17 + days.day_offset * 23), 16))/24 + 
    (ROUND((rp.total_distance / tt.speed_kmph) * 60) / 1440) as end_datetime
FROM route_popularity rp
CROSS JOIN transport_type tt
CROSS JOIN (
  SELECT LEVEL - 1 as day_offset FROM dual CONNECT BY LEVEL <= 90 -- 90 дней
) days
WHERE tt.id = 2
  AND rp.route_id BETWEEN 1 AND 12
  AND (rp.route_id, rp.path_city_ids) IN (
    SELECT route_id, path_city_ids
    FROM (
      SELECT 
        route_id, 
        path_city_ids,
        ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY total_distance ASC) as rn
      FROM route_popularity 
      WHERE route_id BETWEEN 1 AND 12
    )
    WHERE rn <= 15 -- По 15 путей для каждого маршрута
  )

-- 2. БЮДЖЕТНЫЕ маршруты (BUDGET) - все 12 маршрутов по 15 путей
INSERT INTO route_schedule (
  route_id, category, transport_type_id, speed_kmph, price_per_km, 
  path_city_ids, cities_sequence, total_popularity, total_distance_km, 
  total_price, total_time_minutes, start_datetime, end_datetime
)
SELECT 
  rp.route_id,
  'BUDGET' as category,
  1 as transport_type_id,
  tt.speed_kmph,
  tt.price_per_km,
  rp.path_city_ids,
  rp.cities_sequence,
  rp.total_popularity,
  rp.total_distance as total_distance_km,
  ROUND(rp.total_distance * tt.price_per_km, 2) as total_price,
  ROUND((rp.total_distance / tt.speed_kmph) * 60) as total_time_minutes,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 19 + days.day_offset * 29), 16))/24 as start_datetime,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 19 + days.day_offset * 29), 16))/24 + 
    (ROUND((rp.total_distance / tt.speed_kmph) * 60) / 1440) as end_datetime
FROM route_popularity rp
CROSS JOIN transport_type tt
CROSS JOIN (
  SELECT LEVEL - 1 as day_offset FROM dual CONNECT BY LEVEL <= 90
) days
WHERE tt.id = 1
  AND rp.route_id BETWEEN 1 AND 12
  AND (rp.route_id, rp.path_city_ids) IN (
    SELECT route_id, path_city_ids
    FROM (
      SELECT 
        route_id, 
        path_city_ids,
        ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY total_distance ASC) as rn
      FROM route_popularity 
      WHERE route_id BETWEEN 1 AND 12
    )
    WHERE rn <= 15
  )

-- 3. ИНТЕРЕСНЫЕ маршруты (INTERESTING) - все 12 маршрутов по 15 путей
INSERT INTO route_schedule (
  route_id, category, transport_type_id, speed_kmph, price_per_km, 
  path_city_ids, cities_sequence, total_popularity, total_distance_km, 
  total_price, total_time_minutes, start_datetime, end_datetime
)
SELECT 
  rp.route_id,
  'INTERESTING' as category,
  1 as transport_type_id,
  tt.speed_kmph,
  tt.price_per_km,
  rp.path_city_ids,
  rp.cities_sequence,
  rp.total_popularity,
  rp.total_distance as total_distance_km,
  ROUND(rp.total_distance * tt.price_per_km, 2) as total_price,
  ROUND((rp.total_distance / tt.speed_kmph) * 60) as total_time_minutes,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 13 + days.day_offset * 31), 16))/24 as start_datetime,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 13 + days.day_offset * 31), 16))/24 + 
    (ROUND((rp.total_distance / tt.speed_kmph) * 60) / 1440) as end_datetime
FROM route_popularity rp
CROSS JOIN transport_type tt
CROSS JOIN (
  SELECT LEVEL - 1 as day_offset FROM dual CONNECT BY LEVEL <= 90
) days
WHERE tt.id = 1
  AND rp.route_id BETWEEN 1 AND 12
  AND (rp.route_id, rp.path_city_ids) IN (
    SELECT route_id, path_city_ids
    FROM (
      SELECT 
        route_id, 
        path_city_ids,
        ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY total_popularity DESC) as rn
      FROM route_popularity 
      WHERE route_id BETWEEN 1 AND 12
    )
    WHERE rn <= 15
  )

-- 4. ПРЕМИАЛЬНЫЕ маршруты (PREMIUM) - все 12 маршрутов по 15 путей
INSERT INTO route_schedule (
  route_id, category, transport_type_id, speed_kmph, price_per_km, 
  path_city_ids, cities_sequence, total_popularity, total_distance_km, 
  total_price, total_time_minutes, start_datetime, end_datetime
)
SELECT 
  rp.route_id,
  'PREMIUM' as category,
  3 as transport_type_id,
  tt.speed_kmph,
  tt.price_per_km,
  rp.path_city_ids,
  rp.cities_sequence,
  rp.total_popularity,
  rp.total_distance as total_distance_km,
  ROUND(rp.total_distance * tt.price_per_km, 2) as total_price,
  ROUND((rp.total_distance / tt.speed_kmph) * 60) as total_time_minutes,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 11 + days.day_offset * 37), 16))/24 as start_datetime,
  TRUNC(SYSDATE) + days.day_offset + 
    (6 + MOD((rp.route_id * 11 + days.day_offset * 37), 16))/24 + 
    (ROUND((rp.total_distance / tt.speed_kmph) * 60) / 1440) as end_datetime
FROM route_popularity rp
CROSS JOIN transport_type tt
CROSS JOIN (
  SELECT LEVEL - 1 as day_offset FROM dual CONNECT BY LEVEL <= 90
) days
WHERE tt.id = 3
  AND rp.route_id BETWEEN 1 AND 12
  AND (rp.route_id, rp.path_city_ids) IN (
    SELECT route_id, path_city_ids
    FROM (
      SELECT 
        route_id, 
        path_city_ids,
        ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY total_popularity DESC, total_distance ASC) as rn
      FROM route_popularity 
      WHERE route_id BETWEEN 1 AND 12
    )
    WHERE rn <= 15
  )
  
SELECT *
FROM ROUTE_SCHEDULE